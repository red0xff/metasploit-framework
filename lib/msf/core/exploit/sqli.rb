#
# This mixin provides helpers to perform SQL injection
# - provides a level of abstraction for common queries, for example, querying the table names
# - implements blind and time-based SQL injection in a reusable manner
# - Highly extendable (user can run any code to perform the requests, encode payloads and parse results)
#
module Msf
  module Exploit::SQLi
    @@printing_method_names = %i[
        print_status print_good print_bad print_error print_warning
        vprint_status vprint_good vprint_bad vprint_error vprint_warning
    ]
    def initialize(info = {})
      super
      register_advanced_options(
        [
          OptFloat.new('SqliDelay', [ false, 'The delay to sleep on time-based blind SQL injections', 1.0 ])
        ]
      )
      @@datastore = datastore
      @@framework = framework
      @@printing_methods = {}
      @@printing_method_names.each do |sym|
        @@printing_methods[sym] = method(sym)
      end
    end

    def self.datastore
      @@datastore
    end

    def self.framework
      @@framework
    end

    def self.printing_method_names
      @@printing_method_names
    end

    @@printing_method_names.each do |sym|
      define_singleton_method(sym) do |msg|
        @@printing_methods[sym].call(msg)
      end
    end
  end
end

require 'msf/core/exploit/sqli/common'
require 'msf/core/exploit/sqli/sqlitei'
